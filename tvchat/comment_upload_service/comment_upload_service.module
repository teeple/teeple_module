<?php

/**
 * Implemetation of hook_perm()
 */
function comment_upload_service_perm() {
  return array(
    'upload comment file from remote',
    'get comment file from remote',
    );
}

function comment_upload_service_service() {
  return array(

	// upload comment file 
    array(
      '#method' => 'comment_upload.save',
      '#callback' => 'comment_upload_service_save',
      '#access arguments'   => array('upload comment file from remote'),
      '#args' => array(
                 array(
                    '#name' => 'nid',
                    '#type' => 'int',
                    '#optional' => false,
                    '#description' => 'node id'
                ),
                 array(
                    '#name' => 'cid',
                    '#type' => 'int',
                    '#optional' => false,
                    '#description' => 'comment id'
                ),
                array(
                    '#name' => 'fname',
                    '#type' => 'string',
                    '#optional' => false,
                    '#description' => 'file name'
                ),
                array(
                    '#name' => 'attchment',
                    '#type' => 'string',
                    '#optional' => true,
                    '#description' => 'attchedfile MIME(base64 encoded)'
                )
      ),
      '#return' => 'int',
      '#help' => 'Upload Comment File, returns file id'
   	),

 	// get comment file 
    array(
      '#method' => 'comment_upload.get',
      '#callback' => 'comment_upload_service_get',
      '#access arguments'   => array('get comment file from remote'),
      '#args' => array(
                 array(
                    '#name' => 'nid',
                    '#type' => 'int',
                    '#optional' => false,
                    '#description' => 'node id'
                ),
                 array(
                    '#name' => 'cid',
                    '#type' => 'int',
                    '#optional' => false,
                    '#description' => 'comment id'
                )
      ),
      '#return' => 'array',
      '#help' => 'Get Comment File URL, returns file url'
   	)
  );
}

/**
 * Check if the user has permission to save file information.
 *
 * Will probably want to revisit this down the road to make it
 * somewhat tougher, esp if we get to the point where we're saving
 * actual files (see below.)
 */
function comment_upload_service_save_access() {
	return true;
//  return user_access('save file information');
}

function comment_upload_service_save($nid, $cid, $fname, $attchment) {
	// watchdog('comment_upload', 'save.fname='.$fname);

	error_log('comment_upload:'.'save.fname='.$fname);

    if(isset($_POST['attchment']) && strlen($_POST['attchment']) > 0 ) {
        $attachment = str_replace('"', '', $_POST['attchment']);
        $attachment = str_replace(' ', '+', $attachment);
    }

 	if (!isset($account)) {
    	$account = $GLOBALS['user'];
  	}
  	$limits = _upload_file_limits($GLOBALS['user']);
 	$validators = array(
    	'file_validate_extensions' => array($limits['extensions']),
    	'file_validate_image_resolution' => array($limits['resolution']),
    	'file_validate_size' => array($limits['file_size'], $limits['user_size']),
  	);

	if(!user_access('upload files to comments')) {
		watchdog('comment_upload', 'access error');
		return true;
	}

	$file = new stdClass();
	$file->uid = $account->uid;
	$file->filename = $fname;
	$file->filepath = file_directory_path().'/'.$file->filename; 
	$file->description = $file->filename;
	$file->weight = 0;
	$file->remove = 0;
	$file->status = 1;
	$file->timestamp = time();
	$file->file = $attachment;
    // If the submitted file is an update, then set the update parameter for
    // drupal_write_record(), indicating such. Otherwise we can just pass the
    // object in and it will be treated as an insert.
    $update = array();
    if (!empty($file->fid)) {
        $update = 'fid';
    }

    // Build the list of non-munged extensions.
    // @todo: this should not be here. we need to figure out the right place.
    // @todo: also isn't that repeated variable get a waste? I mean, I guess it
    //        is cached but still it is pretty ugly.
    $extensions = '';
    foreach ($account->roles as $rid => $name) {
        $extensions .= ' '. variable_get("upload_extensions_$rid",
        variable_get('upload_extensions_default', 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp'));
    }               
                    
    // Get the directory name for the location of the file:
    $dir = dirname($file->filepath);
      
    // Build the destination folder tree if it doesn't already exists.
    if (!file_check_directory($dir, FILE_CREATE_DIRECTORY)) {
        return services_error("Could not create destination directory for file.");
    }

    // Update file object as necessary
    $file->filepath = file_destination(file_create_path($file->filepath), FILE_EXISTS_RENAME);
    // If filename has not been specified extract it from filepath.
    if ((!isset($file->filename)) || (empty($file->filename))) {
        $file->filename = trim(basename($file->filepath), '.');
    }
    $file->filename = file_munge_filename($file->filename, $extensions, TRUE);
    $file->filemime = file_get_mimetype($file->filename);

    // Rename potentially executable files, to help prevent exploits.
    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
        $file->filemime = 'text/plain';
        $file->filepath .= '.txt';
        $file->filename .= '.txt';
    }

    // If the destination is not provided, or is not writable, error our
    if (empty($file->filepath) || file_check_path($file->filepath) === FALSE) {
        return services_error("Destintion directory does not exist or is not writeable.");
    }

    //The filepath that ends up in the node must contain the filename
    $file->filepath .= '/'. $file->filename;

    // Write the file
	if(strlen($file->file) > 0) {

    	if (!file_save_data(base64_decode($file->file), $file->filepath)) {
        	return services_error("Could not write file to destination");
    	}
  	}
	// If we made it this far it's safe to record this file in the database.
  	drupal_write_record('files', $file, $update);

  	// hook_file_insert() requires an object
  	if (empty($update)) {
    	foreach (module_implements('file_insert') as $module) {
    	  	$function =  $module .'_file_insert';
      		$function($file);
    	}
  	}

	$sql = "INSERT INTO {comment_upload} (fid, cid, nid, description, list, weight) VALUES (%d, %d, %d, '%s', %d, %d)";
 	db_query($sql, $file->fid, $cid, $nid, $file->description, 1, 0);

    // Return the fid
    return $file->fid;
}

function comment_upload_service_get_access() {
	return true;
//  return user_access('save file information');
}

function comment_upload_service_get($nid, $cid) {
	$sql = "SELECT f.*, cu.nid FROM {files} f INNER JOIN {comment_upload} cu ON f.fid = cu.fid WHERE cu.nid = %d AND cu.cid = %d";
 	$result = db_query($sql, $nid, $cid);
	while ($file = db_fetch_object($result)) {
    	$files[$file->fid] = $file;
	}
    return $files;
//	dsm($files);
//    	if (user_access('view files uploaded to comments') && ($node = node_load($file->nid)) && node_access('view', $node)) {
// 			return $files;
//		}
//   	} else {
//      return -1;
//    }
}

function sample($fields = array()) {
  $result = db_query("SELECT nid FROM {node} WHERE type='tvshow'");

  $nodes = array();
  while ($node = db_fetch_object($result)){
     $nodes[] = services_node_load(node_load($node->nid), $fields);
  }
  return $nodes;
}

